# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- develop
# no PR triggers
pr: none

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- task: Docker@2
  inputs:
    containerRegistry: 'esaude-frontend Azure Container Registry'
    repository: 'esaude-frontend'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile.hml'
    tags: 'hml'

- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- script: |
    npm install
    npm run coverage
    npm run test
  displayName: 'npm install and output coverage'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'SONARCLOUD_CONNECTION'
    organization: 'fga-eps-mds-1'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'fga-eps-mds_2020.1-eSaudeUnB-FrontEnd'
    cliSources: '.'
    extraProperties: |
      # Additional properties that will be passed to the scanner, 
      # Put one key=value per line, example:
      sonar.exclusions=**/*.test.js
      sonar.language=js
      sonar.sources=src
      sonar.javascript.lcov.reportPaths=$(System.DefaultWorkingDirectory)/coverage/lcov.info
- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'